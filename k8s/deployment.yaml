# Kubernetes Deployment Configuration for HNC Legal Questionnaire
apiVersion: v1
kind: Namespace
metadata:
  name: hnc-legal
---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: hnc-config
  namespace: hnc-legal
data:
  DATABASE_URL: "postgresql://hnc_user:$(POSTGRES_PASSWORD)@postgres-service:5432/hnc_legal"
  REDIS_URL: "redis://redis-service:6379/0"
  API_BASE_URL: "http://backend-service:8000"
  FRONTEND_URL: "http://frontend-service:3000"
  DATA_DIR: "/app/data"
  LOG_LEVEL: "INFO"
  ENVIRONMENT: "production"
  AI_MODEL: "llama3.1-70b"
  AI_MAX_TOKENS: "1500"
  AI_TEMPERATURE: "0.7"
---
# Secrets for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: hnc-secrets
  namespace: hnc-legal
type: Opaque
data:
  # Base64 encoded values - replace with your actual values
  postgres-password: aG5jX3Bhc3N3b3JkX2NoYW5nZV9tZQ==  # hnc_password_change_me
  secret-key: eW91ci1zZWNyZXQta2V5LWhlcmUtY2hhbmdlLWluLXByb2R1Y3Rpb24=
  jwt-secret-key: eW91ci1qd3Qtc2VjcmV0LWtleS1oZXJlLWNoYW5nZS1pbi1wcm9kdWN0aW9u
  cerebras-api-key: eW91ci1jZXJlYnJhcy1hcGkta2V5LWhlcmU=
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: hnc-legal
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "hnc_legal"
        - name: POSTGRES_USER
          value: "hnc_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hnc-secrets
              key: postgres-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-sql
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - hnc_user
            - -d
            - hnc_legal
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - hnc_user
            - -d
            - hnc_legal
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-sql
        configMap:
          name: postgres-init
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: hnc-legal
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: hnc-legal
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: hnc-legal
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: hnc-legal
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: hnc-legal/backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: hnc-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: hnc-config
              key: REDIS_URL
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: hnc-secrets
              key: secret-key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: hnc-secrets
              key: jwt-secret-key
        - name: CEREBRAS_API_KEY
          valueFrom:
            secretKeyRef:
              name: hnc-secrets
              key: cerebras-api-key
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hnc-secrets
              key: postgres-password
        envFrom:
        - configMapRef:
            name: hnc-config
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: data-pvc
---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: hnc-legal
spec:
  selector:
    app: backend
  ports:
  - port: 8000
    targetPort: 8000
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: hnc-legal
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: hnc-legal/frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: API_BASE_URL
          value: "http://backend-service:8000"
        - name: NODE_ENV
          value: "production"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: hnc-legal
spec:
  selector:
    app: frontend
  ports:
  - port: 3000
    targetPort: 3000
---
# Nginx Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: hnc-legal
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: ssl-certs
          mountPath: /etc/nginx/ssl
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: ssl-certs
        secret:
          secretName: ssl-certificates
---
# Nginx Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: hnc-legal
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 443
---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: hnc-legal
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: hnc-legal
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-pvc
  namespace: hnc-legal
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: hnc-legal
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# Horizontal Pod Autoscaler for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: hnc-legal
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hnc-network-policy
  namespace: hnc-legal
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: hnc-legal
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: hnc-legal
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: hnc-backend-monitor
  namespace: hnc-legal
spec:
  selector:
    matchLabels:
      app: backend
  endpoints:
  - port: "8000"
    path: /metrics
    interval: 30s